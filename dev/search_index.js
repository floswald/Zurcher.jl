var documenterSearchIndex = {"docs":
[{"location":"#Zurcher.jl","page":"Zurcher.jl","title":"Zurcher.jl","text":"","category":"section"},{"location":"","page":"Zurcher.jl","title":"Zurcher.jl","text":"This is a teaching-oriented package for the Bus Engine Replacement Model after Rust (1987) used for my Computational Econ Course\nWe implement both naive nfxp and mpec estimation. It is naive nfxp because it uses standard VFI instead of the much more performant polyalgorithm developed by Rust in his paper. For a thorough benchmarking exercise I refer to \nECTA Comment by Fedor Iskhakov, Jinhyuk Lee, John Rust, Bertel Schjerning, Kyoungwon Seo\nMatlab implementation which includes the polyalgorithm and analytic derivatives for likelihood function distributed as part of the DSE2019 summer school. Several parts of my code have been copied and modified from that code base.","category":"page"},{"location":"#What-is-the-point-of-this-package?","page":"Zurcher.jl","title":"What is the point of this package?","text":"","category":"section"},{"location":"","page":"Zurcher.jl","title":"Zurcher.jl","text":"The main point is to demonstrate the relative easiness with which we can tackle an MPEC problem with the JuMP.jl package.\nJuMP is like AMPL, but for free and embedded in a proper programming language. \nFor a similar, even more impressive demonstration of this please visit https://github.com/UBCECON567/BLPDemand.jl","category":"page"},{"location":"","page":"Zurcher.jl","title":"Zurcher.jl","text":"Modules = [Zurcher]","category":"page"},{"location":"#Zurcher.Harold","page":"Zurcher.jl","title":"Zurcher.Harold","text":"Harold Zurcher DataType\n\nThis type represents an instance of Harold Zurcher, the decision maker in Rust (1987)\nThe default constructor builds Harold for the values in table X of the paper.\n\n\n\n\n\n","category":"type"},{"location":"#Zurcher.bellman-Tuple{Zurcher.Harold, Vector{T} where T}","page":"Zurcher.jl","title":"Zurcher.bellman","text":"bellman(h::Harold, ev0::Vector)\n\nBellman Operator T(EV). Notice the centering of the log sum function by M.\n\n\n\n\n\n","category":"method"},{"location":"#Zurcher.busdata-Tuple{Zurcher.Harold}","page":"Zurcher.jl","title":"Zurcher.busdata","text":"busdata(z::Harold; bustype = 4)\n\nData Loader.\n\n\n\n\n\n","category":"method"},{"location":"#Zurcher.ccp-Tuple{Zurcher.Harold, Vector{T} where T}","page":"Zurcher.jl","title":"Zurcher.ccp","text":"ccp(h::Harold, ev0::Vector)\n\nConditional Choice Probability function returning the proability of replacing the engine at a given mileage state x.\n\n\n\n\n\n","category":"method"},{"location":"#Zurcher.dataplots-Tuple{}","page":"Zurcher.jl","title":"Zurcher.dataplots","text":"dataplots()\n\nreturn a dict of plots and tables from the data.\n\n\n\n\n\n","category":"method"},{"location":"#Zurcher.loglikelihood-Tuple{Any, Any, BitArray, Vector{Int64}, Vector{Int64}}","page":"Zurcher.jl","title":"Zurcher.loglikelihood","text":"log likelihood function\n\nl_n(thetaEV_theta) = log mathcalL_n(thetaEV_theta) = sum_i=1^162sum_t=2^T_i left( log P(d_itx_it) + log pi(x_itx_it-1d_it-1) right)\n\n\n\n\n\n","category":"method"},{"location":"#Zurcher.make_trans-Tuple{Any, Any}","page":"Zurcher.jl","title":"Zurcher.make_trans","text":"make_trans(θ, n)\n\nBuild a transition matrix of mileage states for n mileage bins and a vector θ of probabilities      to move to each possible bin (or to stay in the same bin).\n\n\n\n\n\n","category":"method"},{"location":"#Zurcher.mpec-Tuple{}","page":"Zurcher.jl","title":"Zurcher.mpec","text":"mpec(; β = 0.9, is_silent = false, doθ = false,n = 175, θ = [0.107, 0.5152 ,0.3622, 0.0143,0.0009])\n\nMPEC estimation. Can choose to do partial MLE (don't estimate the θs for mileage transition).\n\n\n\n\n\n","category":"method"},{"location":"#Zurcher.nested_likelihood-Tuple{Vector{Float64}, Zurcher.Harold, DataFrames.DataFrame}","page":"Zurcher.jl","title":"Zurcher.nested_likelihood","text":"nested_likelihood(x::Vector{Float64}, h::Harold, d::DataFrame)\n\nOuter loop of NFXP proceedure. takes candidate vector x of parameters, solves model, and evaluates the log likelihood.\n\n\n\n\n\n","category":"method"},{"location":"#Zurcher.nfxp-Tuple{}","page":"Zurcher.jl","title":"Zurcher.nfxp","text":"nfxp(; β = 0.9, is_silent = false, doθ = false,n = 175, θ = [0.107, 0.5152 ,0.3622, 0.0143,0.0009])\n\nNested Fixed Point estimation. Can choose to do partial MLE (don't estimate the θs for mileage transition).\n\n\n\n\n\n","category":"method"},{"location":"#Zurcher.plotit-Tuple{}","page":"Zurcher.jl","title":"Zurcher.plotit","text":"plotit(;n=90, β=0.9)\n\nTest plot.\n\n\n\n\n\n","category":"method"},{"location":"#Zurcher.runit-Tuple{}","page":"Zurcher.jl","title":"Zurcher.runit","text":"runit(;n=90, β=0.9999,c=2.4, θ=[0.3, 0.68, 0.02])\n\nTest run.\n\n\n\n\n\n","category":"method"},{"location":"#Zurcher.simit-Tuple{}","page":"Zurcher.jl","title":"Zurcher.simit","text":"simit(; T=500,n=500, θ=[0.3,0.6,0.1])\n\nSimulate one bus.\n\n\n\n\n\n","category":"method"},{"location":"#Zurcher.vfi-Tuple{Zurcher.Harold}","page":"Zurcher.jl","title":"Zurcher.vfi","text":"vfi(h::Harold)\n\nValue Function Iterator. Will iterate on bellman until the absolute norm is less than value h.tol.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Zurcher.jl","title":"Zurcher.jl","text":"end","category":"page"}]
}
